{"version":3,"file":"knockout.async.min.js","sources":["../src/knockout.async.js"],"names":["asyncComputed","evaluator","owner","mappingFn","currentDeferred","result","ko","observable","inProgress","computed","reject","evaluatorResult","call","done","$","Deferred","data","resolve"],"mappings":"AAAA,QAASA,eAAcC,EAAWC,EAAOC,GACrC,GACIC,GADAC,EAASC,GAAGC,YA4BhB,OA1BAF,GAAOG,WAAaF,GAAGC,YAAW,GAElCD,GAAGG,SAAS,WAEJL,GACAA,EAAgBM,QAGpB,IAAIC,GAAkBV,EAAUW,KAAKV,EAEjCS,IAAoD,kBAAzBA,GAAgBE,MAC3CR,EAAOG,YAAW,GAClBJ,EAAkBU,EAAEC,WAAWF,KAAK,SAASG,GACzCX,EAAOG,YAAW,GAEdH,EADAF,EACOA,EAAUa,GAEVA,KAGfL,EAAgBE,KAAKT,EAAgBa,UAErCZ,EAAOM,KAIRN","sourcesContent":["function asyncComputed(evaluator, owner, mappingFn) {\r\n    var result = ko.observable(),\r\n        currentDeferred;\r\n    result.inProgress = ko.observable(false); // Track whether we're waiting for a result\r\n\r\n    ko.computed(function() {\r\n        // Abort any in-flight evaluation to ensure we only notify with the latest value\r\n        if (currentDeferred) {\r\n            currentDeferred.reject();\r\n        }\r\n\r\n        var evaluatorResult = evaluator.call(owner);\r\n        // Cope with both asynchronous and synchronous values\r\n        if (evaluatorResult && (typeof evaluatorResult.done === \"function\")) { // Async\r\n            result.inProgress(true);\r\n            currentDeferred = $.Deferred().done(function(data) {\r\n                result.inProgress(false);\r\n                if (mappingFn) {\r\n                    result(mappingFn(data));\r\n                } else {\r\n                    result(data);\r\n                }\r\n            });\r\n            evaluatorResult.done(currentDeferred.resolve);\r\n        } else {\r\n            result(evaluatorResult);\r\n        }\r\n    });\r\n\r\n    return result;\r\n}\r\n"]}